/* The following code was generated by JFlex 1.6.1 */

package tra.v3;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import tra.models.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>v3/Elpis.flex</tt>
 */
public class TraLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\17\1\3\1\2\1\0\1\3\1\1\16\17\4\0\1\3\1\35"+
    "\1\43\1\0\1\16\1\75\1\0\1\75\1\24\1\25\1\5\1\15"+
    "\1\32\1\10\1\13\1\4\1\6\3\7\4\7\2\7\1\31\1\30"+
    "\1\34\1\22\1\33\2\0\4\12\1\14\1\12\6\36\1\66\2\36"+
    "\1\67\3\36\1\70\3\36\1\11\1\71\1\36\1\20\1\42\1\21"+
    "\1\23\1\16\1\0\1\60\1\47\1\57\1\61\1\41\1\63\1\54"+
    "\1\64\1\45\1\73\1\74\1\52\1\62\1\53\1\50\1\65\1\36"+
    "\1\56\1\40\1\46\1\37\1\55\1\51\1\44\1\72\1\36\1\26"+
    "\1\0\1\27\1\0\41\17\2\0\4\16\4\0\1\16\2\0\1\17"+
    "\7\0\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0\u01ca\16"+
    "\4\0\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0\160\17"+
    "\5\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16\1\0"+
    "\3\16\1\0\1\16\1\0\24\16\1\0\123\16\1\0\213\16\1\0"+
    "\5\17\2\0\246\16\1\0\46\16\2\0\1\16\7\0\47\16\7\0"+
    "\1\16\1\0\55\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0"+
    "\1\17\10\0\33\16\5\0\3\16\15\0\6\17\5\0\1\16\4\0"+
    "\13\17\1\0\1\17\3\0\53\16\37\17\4\0\2\16\1\17\143\16"+
    "\1\0\1\16\10\17\1\0\6\17\2\16\2\17\1\0\4\17\2\16"+
    "\12\17\3\16\2\0\1\16\17\0\1\17\1\16\1\17\36\16\33\17"+
    "\2\0\131\16\13\17\1\16\16\0\12\17\41\16\11\17\2\16\4\0"+
    "\1\16\5\0\26\16\4\17\1\16\11\17\1\16\3\17\1\16\5\17"+
    "\22\0\31\16\3\17\4\0\13\16\65\0\25\16\1\0\10\16\26\0"+
    "\60\17\66\16\3\17\1\16\22\17\1\16\7\17\12\16\2\17\2\0"+
    "\12\17\1\0\20\16\3\17\1\0\10\16\2\0\2\16\2\0\26\16"+
    "\1\0\7\16\1\0\1\16\3\0\4\16\2\0\1\17\1\16\7\17"+
    "\2\0\2\17\2\0\3\17\1\16\10\0\1\17\4\0\2\16\1\0"+
    "\3\16\2\17\2\0\12\17\4\16\7\0\2\16\4\0\3\17\1\0"+
    "\6\16\4\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\2\16\1\0\2\16\2\0\1\17\1\0\5\17\4\0\2\17\2\0"+
    "\3\17\3\0\1\17\7\0\4\16\1\0\1\16\7\0\14\17\3\16"+
    "\1\17\13\0\3\17\1\0\11\16\1\0\3\16\1\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\5\16\2\0\1\17\1\16\10\17\1\0"+
    "\3\17\1\0\3\17\2\0\1\16\17\0\2\16\2\17\2\0\12\17"+
    "\1\0\1\16\7\0\1\16\6\17\1\0\3\17\1\0\10\16\2\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0"+
    "\1\17\1\16\7\17\2\0\2\17\2\0\3\17\10\0\2\17\4\0"+
    "\2\16\1\0\3\16\2\17\2\0\12\17\1\0\1\16\20\0\1\17"+
    "\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\4\0"+
    "\5\17\3\0\3\17\1\0\4\17\2\0\1\16\6\0\1\17\16\0"+
    "\12\17\11\0\1\16\6\0\4\17\1\0\10\16\1\0\3\16\1\0"+
    "\27\16\1\0\20\16\3\0\1\16\7\17\1\0\3\17\1\0\4\17"+
    "\7\0\2\17\1\0\3\16\5\0\2\16\2\17\2\0\12\17\20\0"+
    "\1\16\3\17\1\0\10\16\1\0\3\16\1\0\27\16\1\0\12\16"+
    "\1\0\5\16\2\0\1\17\1\16\7\17\1\0\3\17\1\0\4\17"+
    "\7\0\2\17\7\0\1\16\1\0\2\16\2\17\2\0\12\17\1\0"+
    "\2\16\15\0\4\17\1\0\10\16\1\0\3\16\1\0\51\16\2\17"+
    "\1\16\7\17\1\0\3\17\1\0\4\17\1\16\5\0\3\16\1\17"+
    "\7\0\3\16\2\17\2\0\12\17\12\0\6\16\2\0\2\17\1\0"+
    "\22\16\3\0\30\16\1\0\11\16\1\0\1\16\2\0\7\16\3\0"+
    "\1\17\4\0\6\17\1\0\1\17\1\0\10\17\6\0\12\17\2\0"+
    "\2\17\15\0\60\16\1\17\2\16\7\17\4\0\10\16\10\17\1\0"+
    "\12\17\47\0\2\16\1\0\1\16\2\0\2\16\1\0\1\16\2\0"+
    "\1\16\6\0\4\16\1\0\7\16\1\0\3\16\1\0\1\16\1\0"+
    "\1\16\2\0\2\16\1\0\4\16\1\17\2\16\6\17\1\0\2\17"+
    "\1\16\2\0\5\16\1\0\1\16\1\0\6\17\2\0\12\17\2\0"+
    "\4\16\40\0\1\16\27\0\2\17\6\0\12\17\13\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\2\17\10\16\1\0\44\16\4\0\24\17"+
    "\1\0\2\17\5\16\13\17\1\0\44\17\11\0\1\17\71\0\53\16"+
    "\24\17\1\16\12\17\6\0\6\16\4\17\4\16\3\17\1\16\3\17"+
    "\2\16\7\17\3\16\4\17\15\16\14\17\1\16\17\17\2\0\46\16"+
    "\1\0\1\16\5\0\1\16\2\0\53\16\1\0\u014d\16\1\0\4\16"+
    "\2\0\7\16\1\0\1\16\1\0\4\16\2\0\51\16\1\0\4\16"+
    "\2\0\41\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16"+
    "\2\0\17\16\1\0\71\16\1\0\4\16\2\0\103\16\2\0\3\17"+
    "\40\0\20\16\20\0\126\16\2\0\6\16\3\0\u026c\16\2\0\21\16"+
    "\1\0\32\16\5\0\113\16\3\0\13\16\7\0\15\16\1\0\4\16"+
    "\3\17\13\0\22\16\3\17\13\0\22\16\2\17\14\0\15\16\1\0"+
    "\3\16\1\0\2\17\14\0\64\16\40\17\3\0\1\16\3\0\2\16"+
    "\1\17\2\0\12\17\41\0\4\17\1\0\12\17\6\0\130\16\10\0"+
    "\5\16\2\17\42\16\1\17\1\16\5\0\106\16\12\0\37\16\1\0"+
    "\14\17\4\0\14\17\12\0\12\17\36\16\2\0\5\16\13\0\54\16"+
    "\4\0\32\16\6\0\12\17\46\0\27\16\5\17\4\0\65\16\12\17"+
    "\1\0\35\17\2\0\13\17\6\0\12\17\15\0\1\16\10\0\16\17"+
    "\102\0\5\17\57\16\21\17\7\16\4\0\12\17\21\0\11\17\14\0"+
    "\3\17\36\16\15\17\2\16\12\17\54\16\16\17\14\0\44\16\24\17"+
    "\10\0\12\17\3\0\3\16\12\17\44\16\2\0\11\16\107\0\3\17"+
    "\1\0\25\17\4\16\1\17\4\16\3\17\2\16\3\17\6\0\300\16"+
    "\72\17\1\0\5\17\u0116\16\2\0\6\16\2\0\46\16\2\0\6\16"+
    "\2\0\10\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\37\16"+
    "\2\0\65\16\1\0\7\16\1\0\1\16\3\0\3\16\1\0\7\16"+
    "\3\0\4\16\2\0\6\16\4\0\15\16\5\0\3\16\1\0\7\16"+
    "\16\0\5\17\32\0\5\17\20\0\2\16\23\0\1\16\13\0\5\17"+
    "\1\0\12\17\1\0\1\16\15\0\1\16\20\0\15\16\3\0\40\16"+
    "\20\0\15\17\4\0\1\17\3\0\14\17\21\0\1\16\4\0\1\16"+
    "\2\0\12\16\1\0\1\16\3\0\5\16\6\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\4\16\1\0\13\16\2\0\4\16\5\0\5\16"+
    "\4\0\1\16\21\0\51\16\u0a77\0\57\16\1\0\57\16\1\0\205\16"+
    "\6\0\4\16\3\17\2\16\14\0\46\16\1\0\1\16\5\0\1\16"+
    "\2\0\70\16\7\0\1\16\17\0\1\17\27\16\11\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\40\17\57\0\1\16\u01d5\0\3\16\31\0"+
    "\11\16\6\17\1\0\5\16\2\0\5\16\4\0\126\16\2\0\2\17"+
    "\2\0\3\16\1\0\132\16\1\0\4\16\5\0\52\16\2\0\136\16"+
    "\21\0\33\16\65\0\20\16\u0200\0\u19b6\16\112\0\u51eb\16\25\0\u048d\16"+
    "\103\0\56\16\2\0\u010d\16\3\0\20\16\12\17\2\16\24\0\57\16"+
    "\1\17\4\0\12\17\1\0\37\16\2\17\120\16\2\17\45\0\11\16"+
    "\2\0\147\16\2\0\44\16\1\0\10\16\77\0\13\16\1\17\3\16"+
    "\1\17\4\16\1\17\27\16\5\17\20\0\1\16\7\0\64\16\14\0"+
    "\2\17\62\16\22\17\12\0\12\17\6\0\22\17\6\16\3\0\1\16"+
    "\1\0\1\16\2\0\12\17\34\16\10\17\2\0\27\16\15\17\14\0"+
    "\35\16\3\0\4\17\57\16\16\17\16\0\1\16\12\17\6\0\5\16"+
    "\1\17\12\16\12\17\5\16\1\0\51\16\16\17\11\0\3\16\1\17"+
    "\10\16\2\17\2\0\12\17\6\0\27\16\3\0\1\16\3\17\62\16"+
    "\1\17\1\16\3\17\2\16\2\17\5\16\2\17\1\16\1\17\1\16"+
    "\30\0\3\16\2\0\13\16\5\17\2\0\3\16\2\17\12\0\6\16"+
    "\2\0\6\16\2\0\6\16\11\0\7\16\1\0\7\16\1\0\53\16"+
    "\1\0\12\16\12\0\163\16\10\17\1\0\2\17\2\0\12\17\6\0"+
    "\u2ba4\16\14\0\27\16\4\0\61\16\u2104\0\u016e\16\2\0\152\16\46\0"+
    "\7\16\14\0\5\16\5\0\1\16\1\17\12\16\1\0\15\16\1\0"+
    "\5\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\154\16\41\0"+
    "\u016b\16\22\0\100\16\2\0\66\16\50\0\15\16\3\0\20\17\20\0"+
    "\20\17\3\0\2\16\30\0\3\16\31\0\1\16\6\0\5\16\1\0"+
    "\207\16\2\0\1\17\4\0\1\16\13\0\12\17\7\0\32\16\4\0"+
    "\1\16\1\0\32\16\13\0\131\16\3\0\6\16\2\0\6\16\2\0"+
    "\6\16\2\0\3\16\3\0\2\16\3\0\2\16\22\0\3\17\4\0"+
    "\14\16\1\0\32\16\1\0\23\16\1\0\2\16\1\0\17\16\2\0"+
    "\16\16\42\0\173\16\105\0\65\16\210\0\1\17\202\0\35\16\3\0"+
    "\61\16\17\0\1\17\37\0\40\16\15\0\36\16\5\0\46\16\5\17"+
    "\5\0\36\16\2\0\44\16\4\0\10\16\1\0\5\16\52\0\236\16"+
    "\2\0\12\17\6\0\44\16\4\0\44\16\4\0\50\16\10\0\64\16"+
    "\234\0\u0137\16\11\0\26\16\12\0\10\16\230\0\6\16\2\0\1\16"+
    "\1\0\54\16\1\0\2\16\3\0\1\16\2\0\27\16\12\0\27\16"+
    "\11\0\37\16\101\0\23\16\1\0\2\16\12\0\26\16\12\0\32\16"+
    "\106\0\70\16\6\0\2\16\100\0\1\16\3\17\1\0\2\17\5\0"+
    "\4\17\4\16\1\0\3\16\1\0\33\16\4\0\3\17\4\0\1\17"+
    "\40\0\35\16\3\0\35\16\43\0\10\16\1\0\34\16\2\17\31\0"+
    "\66\16\12\0\26\16\12\0\23\16\15\0\22\16\156\0\111\16\67\0"+
    "\63\16\15\0\63\16\u030d\0\3\17\65\16\17\17\37\0\12\17\17\0"+
    "\4\17\55\16\13\17\2\0\1\17\22\0\31\16\7\0\12\17\6\0"+
    "\3\17\44\16\16\17\1\0\12\17\20\0\43\16\1\17\2\0\1\16"+
    "\11\0\3\17\60\16\16\17\4\16\5\0\3\17\3\0\12\17\1\16"+
    "\1\0\1\16\43\0\22\16\1\0\31\16\14\17\6\0\1\17\101\0"+
    "\7\16\1\0\1\16\1\0\4\16\1\0\17\16\1\0\12\16\7\0"+
    "\57\16\14\17\5\0\12\17\6\0\4\17\1\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0\1\17"+
    "\1\16\7\17\2\0\2\17\2\0\3\17\2\0\1\16\6\0\1\17"+
    "\5\0\5\16\2\17\2\0\7\17\3\0\5\17\213\0\65\16\22\17"+
    "\4\16\5\0\12\17\46\0\60\16\24\17\2\16\1\0\1\16\10\0"+
    "\12\17\246\0\57\16\7\17\2\0\11\17\27\0\4\16\2\17\42\0"+
    "\60\16\21\17\3\0\1\16\13\0\12\17\46\0\53\16\15\17\10\0"+
    "\12\17\66\0\32\16\3\0\17\17\4\0\12\17\u0166\0\100\16\12\17"+
    "\25\0\1\16\u0100\0\1\16\12\17\50\16\7\17\1\16\4\17\10\0"+
    "\1\17\10\0\1\16\13\17\50\16\2\0\4\16\20\17\46\0\71\16"+
    "\u0107\0\11\16\1\0\45\16\10\17\1\0\10\17\1\16\17\0\12\17"+
    "\30\0\36\16\2\0\26\17\1\0\16\17\111\0\7\16\1\0\2\16"+
    "\1\0\46\16\6\17\3\0\1\17\1\0\2\17\1\0\7\17\1\16"+
    "\1\17\10\0\12\17\u02a6\0\u039a\16\146\0\157\16\21\0\304\16\u0abc\0"+
    "\u042f\16\u0fd1\0\u0247\16\u21b9\0\u0239\16\7\0\37\16\1\0\12\17\146\0"+
    "\36\16\2\0\5\17\13\0\60\16\7\17\11\0\4\16\14\0\12\17"+
    "\11\0\25\16\5\0\23\16\u0370\0\105\16\13\0\1\16\56\17\20\0"+
    "\4\17\15\16\100\0\2\16\36\0\u17ed\16\23\0\u02f3\16\u250d\0\u011f\16"+
    "\121\0\u018c\16\u0904\0\153\16\5\0\15\16\3\0\11\16\7\0\12\16"+
    "\3\0\2\17\1\0\4\17\u14c1\0\5\17\3\0\26\17\2\0\7\17"+
    "\36\0\4\17\224\0\3\17\u01bb\0\125\16\1\0\107\16\1\0\2\16"+
    "\2\0\1\16\2\0\2\16\2\0\4\16\1\0\14\16\1\0\1\16"+
    "\1\0\7\16\1\0\101\16\1\0\4\16\2\0\10\16\1\0\7\16"+
    "\1\0\34\16\1\0\4\16\1\0\5\16\1\0\1\16\3\0\7\16"+
    "\1\0\u0154\16\2\0\31\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16\1\0\37\16"+
    "\1\0\31\16\1\0\10\16\2\0\62\17\u0200\0\67\17\4\0\62\17"+
    "\10\0\1\17\16\0\1\17\26\0\5\17\1\0\17\17\u0550\0\7\17"+
    "\1\0\21\17\2\0\7\17\1\0\2\17\1\0\5\17\u07d5\0\305\16"+
    "\13\0\7\17\51\0\104\16\7\17\5\0\12\17\u04a6\0\4\16\1\0"+
    "\33\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0\12\16\1\0"+
    "\4\16\1\0\1\16\1\0\1\16\6\0\1\16\4\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\3\16\1\0\2\16\1\0\1\16\2\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\2\16\1\0\1\16\2\0\4\16\1\0\7\16\1\0\4\16\1\0"+
    "\4\16\1\0\1\16\1\0\12\16\1\0\21\16\5\0\3\16\1\0"+
    "\5\16\1\0\21\16\u1144\0\ua6d7\16\51\0\u1035\16\13\0\336\16\2\0"+
    "\u1682\16\16\0\u1d31\16\u0c1f\0\u021e\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\17\36\0\140\17\200\0\360\17\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\3\10\1\30\1\31\17\10\2\32\1\6"+
    "\1\32\1\6\1\33\1\10\1\34\1\35\1\36\1\37"+
    "\11\10\1\40\1\41\1\10\1\42\1\43\6\10\1\44"+
    "\1\10\1\45\1\10\1\46\1\47\15\10\1\50\4\10"+
    "\1\51\7\10\2\6\1\0\1\6\1\0\1\10\1\52"+
    "\15\10\1\53\12\10\1\54\1\55\13\10\1\56\1\57"+
    "\5\10\1\60\1\10\1\61\3\10\1\6\3\10\1\62"+
    "\1\10\1\63\1\64\2\10\1\65\1\66\2\10\1\67"+
    "\1\70\1\10\1\71\2\10\1\72\1\73\1\10\1\74"+
    "\1\75\13\10\1\76\6\10\1\77\1\10\1\6\1\100"+
    "\1\101\1\102\1\10\1\103\1\104\1\10\1\105\1\10"+
    "\1\106\1\10\1\107\1\110\1\111\4\10\1\112\2\10"+
    "\1\113\3\10\1\114\1\115\1\10\1\116\1\117\1\10"+
    "\1\6\4\10\1\120\1\121\3\10\1\122\1\123\1\10"+
    "\1\124\1\125\1\10\1\126\1\6\2\10\1\127\3\10"+
    "\1\130\1\131\2\10\1\6\1\10\1\132\1\10\1\133"+
    "\2\10\1\134\1\6\1\135\1\136\1\10\1\137\1\6"+
    "\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\76\0\76\0\370"+
    "\0\u0136\0\u0174\0\u01b2\0\u01f0\0\u022e\0\76\0\76\0\76"+
    "\0\u026c\0\76\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e"+
    "\0\76\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\76\0\u0934\0\76"+
    "\0\76\0\76\0\76\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\76\0\u01b2\0\u0ba0\0\u0bde"+
    "\0\u01b2\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u01b2"+
    "\0\u0d90\0\u01b2\0\u0dce\0\u01b2\0\u01b2\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u01b2\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u07fe"+
    "\0\u141a\0\u1458\0\u1496\0\u08f6\0\u14d4\0\u01b2\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u01b2\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u01b2\0\u01b2"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u01b2\0\u01b2\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u01b2\0\u1e84\0\u01b2\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u01b2\0\u2074\0\u01b2\0\u01b2"+
    "\0\u20b2\0\u20f0\0\u01b2\0\u01b2\0\u212e\0\u216c\0\u01b2\0\u01b2"+
    "\0\u21aa\0\u01b2\0\u21e8\0\u2226\0\u01b2\0\u01b2\0\u2264\0\u01b2"+
    "\0\u01b2\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u01b2\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u277a\0\u01b2\0\u01b2\0\u27b8\0\u01b2\0\u27f6\0\u01b2"+
    "\0\u2834\0\u01b2\0\u01b2\0\u01b2\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u01b2\0\u296a\0\u29a8\0\u01b2\0\u29e6\0\u2a24\0\u2a62\0\u01b2"+
    "\0\u01b2\0\u2aa0\0\u01b2\0\u01b2\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u01b2\0\u01b2\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u01b2\0\u2d4a\0\u01b2\0\u01b2\0\u2d88\0\u01b2\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u01b2\0\u2e80\0\u2ebe\0\u2efc\0\u01b2\0\u01b2\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u01b2\0\u3032\0\u01b2\0\u3070\0\u30ae"+
    "\0\u01b2\0\u30ec\0\u01b2\0\u01b2\0\u312a\0\u01b2\0\u083c\0\u01b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\13\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\13\1\35\1\36"+
    "\1\37\1\40\1\41\1\13\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\13\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\13\1\60\7\13\1\5\100\0"+
    "\2\4\75\0\1\4\100\0\2\11\1\0\1\61\1\62"+
    "\1\63\1\64\21\0\3\62\1\64\2\0\1\61\30\62"+
    "\7\0\2\11\1\0\2\62\1\63\1\64\21\0\3\62"+
    "\1\64\2\0\31\62\10\0\1\65\23\0\1\66\50\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\31\13\7\0\2\63\74\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\22\13\1\67\6\13\23\0\1\70\75\0\1\71\75\0"+
    "\1\72\75\0\1\73\61\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\2\13\1\74\1\13\2\0"+
    "\7\13\1\75\21\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\2\13\1\76"+
    "\11\13\1\77\14\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\1\100\5\13"+
    "\1\101\1\102\2\13\1\103\1\13\1\104\14\13\44\0"+
    "\1\105\40\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\2\13\1\106\1\13\2\0\2\13\1\107"+
    "\4\13\1\110\7\13\1\111\11\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\1\13\1\112\10\13\1\113\5\13\1\114\10\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\115\2\0\4\13\1\116\7\13\1\117\11\13"+
    "\1\120\2\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\3\13\1\121\3\13"+
    "\1\122\1\13\1\123\1\124\4\13\1\125\11\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\126\16\13\1\127\10\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\130\2\13\1\131\24\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\132\2\0\4\13\1\133\7\13\1\134\14\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\14\13\1\135\14\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\136\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\4\13\1\137"+
    "\1\13\1\140\3\13\1\141\1\13\1\142\14\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\2\13\1\143\1\13\2\0\7\13\1\144\2\13\1\145"+
    "\1\146\15\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\3\13\1\147\2\0\4\13\1\150"+
    "\24\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\3\13\1\151\2\0\4\13\1\152\24\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\1\13\1\153\2\13\2\0\4\13\1\154\7\13"+
    "\1\155\14\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\12\13\1\156\1\13"+
    "\1\157\14\13\7\0\1\160\1\161\1\0\1\62\1\161"+
    "\1\0\1\161\21\0\3\62\1\161\2\0\3\62\1\161"+
    "\7\62\3\161\1\62\1\161\11\62\7\0\2\62\1\0"+
    "\2\62\1\0\1\62\21\0\4\62\2\0\31\62\7\0"+
    "\2\63\4\0\1\162\24\0\1\162\42\0\2\163\1\164"+
    "\2\62\1\0\1\62\1\164\20\0\4\62\2\0\31\62"+
    "\7\0\2\65\74\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\23\13\1\165\5\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\3\13\1\166\2\0\1\13\1\167\27\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\2\13\1\170\26\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\3\13\1\171"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\2\13\1\172\26\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\1\13\1\173\27\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\2\13"+
    "\1\174\1\13\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\13\13"+
    "\1\175\15\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\12\13\1\176\16\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\13\13\1\177\15\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\200\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\2\13\1\201\1\13\2\0"+
    "\31\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\16\13\1\202\12\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\1\13\1\203\2\13\2\0\26\13\1\204\2\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\205\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\20\13"+
    "\1\206\10\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\5\13\1\207\23\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\2\13\1\210\1\13\2\0\31\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\27\13\1\211\1\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\3\13\1\212\2\0"+
    "\31\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\2\13\1\213\26\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\214\27\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\30\13\1\215\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\4\13\1\216\24\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\5\13\1\217\23\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\2\13\1\220\26\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\16\13"+
    "\1\221\12\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\6\13\1\222\22\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\2\13\1\223\13\13\1\224\12\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\225\6\13\1\226\12\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\14\13\1\227\14\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\230\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\1\13\1\231\2\13\2\0"+
    "\2\13\1\232\7\13\1\233\16\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\15\13\1\234\13\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\3\13\1\235\2\0\10\13"+
    "\1\236\20\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\2\13\1\237\26\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\17\13\1\240\11\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\1\13\1\241\27\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\14\13"+
    "\1\242\14\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\15\13\1\243\13\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\244\21\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\12\13\1\245\16\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\6\13"+
    "\1\246\22\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\4\13\1\247\24\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\12\13\1\250\16\13\7\0\2\251"+
    "\1\0\1\62\1\251\1\0\1\251\21\0\3\62\1\251"+
    "\2\0\3\62\1\251\7\62\3\251\1\62\1\251\11\62"+
    "\7\0\2\65\1\164\4\0\1\164\66\0\2\163\1\0"+
    "\2\62\1\0\1\62\21\0\4\62\2\0\31\62\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\24\13\1\252\4\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\7\13\1\253\21\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\1\13\1\254"+
    "\27\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\21\13\1\255\7\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\256\27\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\2\13\1\257\26\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\3\13\1\260\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\14\13\1\261\14\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\4\13\1\262\24\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\20\13"+
    "\1\263\10\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\16\13\1\264\12\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\2\13\1\265\26\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\266\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\3\13\1\267\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\270\21\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\14\13\1\271\14\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\6\13"+
    "\1\272\22\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\3\13\1\273\2\0\31\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\274\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\12\13"+
    "\1\275\16\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\20\13\1\276\10\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\13\13\1\277\15\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\300\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\21\13\1\301"+
    "\7\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\3\13\1\302\2\0\31\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\1\13"+
    "\1\303\2\13\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\1\13\1\304\2\13"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\3\13\1\305\2\0\31\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\15\13\1\306\13\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\16\13\1\307\12\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\2\13\1\310\1\13\2\0"+
    "\31\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\14\13\1\311\14\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\10\13\1\312\20\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\13\13\1\313\15\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\3\13\1\314\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\2\13\1\315\1\13\2\0\31\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\1\13\1\316\27\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\1\13"+
    "\1\317\27\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\7\13\1\320\21\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\321\21\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\13\13\1\322\15\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\2\13\1\323\1\13"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\21\13\1\324\7\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\14\13\1\325\14\13\7\0\2\326"+
    "\1\0\1\62\1\326\1\0\1\326\21\0\3\62\1\326"+
    "\2\0\3\62\1\326\7\62\3\326\1\62\1\326\11\62"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\25\13\1\327\3\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\10\13\1\330\20\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\6\13"+
    "\1\331\22\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\2\13\1\332\1\13\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\21\13\1\333\7\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\12\13\1\334\16\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\14\13"+
    "\1\335\14\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\2\13\1\336\1\13\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\11\13\1\337\17\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\15\13\1\340\13\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\13\13"+
    "\1\341\15\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\20\13\1\342\10\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\15\13\1\343\13\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\344\2\0\31\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\12\13\1\345"+
    "\16\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\16\13\1\346\12\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\347\27\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\14\13\1\350\14\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\2\13\1\351\1\13\2\0"+
    "\31\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\2\13\1\352\26\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\20\13\1\353\10\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\20\13\1\354\10\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\17\13\1\355"+
    "\11\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\4\13\1\356\24\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\7\13\1\357\21\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\10\13\1\360\20\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\2\13\1\361\1\13\2\0"+
    "\31\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\2\13\1\362\26\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\363\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\2\13\1\364\1\13"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\16\13\1\365\12\13"+
    "\7\0\2\366\1\0\1\62\1\366\1\0\1\366\21\0"+
    "\3\62\1\366\2\0\3\62\1\366\7\62\3\366\1\62"+
    "\1\366\11\62\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\17\13\1\367\11\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\370\21\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\3\13"+
    "\1\371\2\0\1\13\1\372\27\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\2\13\1\373\26\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\7\13\1\374"+
    "\21\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\4\13\2\0\3\13\1\375\25\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\2\13\1\376\26\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\7\13\1\377\21\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\3\13\1\u0100\2\0\31\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\2\13\1\u0101\26\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\1\13"+
    "\1\u0102\2\13\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\7\13"+
    "\1\u0103\21\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\3\13\1\u0104\2\0\31\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\1\13\1\u0105\27\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\2\13\1\u0106"+
    "\1\13\2\0\31\13\7\0\2\u0107\1\0\1\62\1\u0107"+
    "\1\0\1\u0107\21\0\3\62\1\u0107\2\0\3\62\1\u0107"+
    "\7\62\3\u0107\1\62\1\u0107\11\62\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\4\13\2\0"+
    "\1\13\1\u0108\27\13\7\0\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\2\13\16\0\4\13\2\0\13\13\1\u0109"+
    "\15\13\7\0\2\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\16\0\2\13\1\u010a\1\13\2\0\31\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\4\13\2\0\4\13\1\u010b\24\13\7\0\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\16\0\3\13\1\u010c"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\1\13\1\u010d\27\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\15\13\1\u010e\13\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\15\13\1\u010f\13\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\6\13"+
    "\1\u0110\22\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\4\13\1\u0111\24\13"+
    "\7\0\2\u0112\1\0\1\62\1\u0112\1\0\1\u0112\21\0"+
    "\3\62\1\u0112\2\0\3\62\1\u0112\7\62\3\u0112\1\62"+
    "\1\u0112\11\62\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\3\13\1\u0113\2\0\31\13\7\0"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\2\13\16\0"+
    "\3\13\1\u0114\2\0\31\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\1\13\1\u0115\2\13"+
    "\2\0\31\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\12\13\1\u0116\16\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\4\13\1\u0117\24\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\6\13\1\u0118\22\13\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\7\13"+
    "\1\u0119\21\13\7\0\2\u011a\1\0\1\62\1\u011a\1\0"+
    "\1\u011a\21\0\3\62\1\u011a\2\0\3\62\1\u011a\7\62"+
    "\3\u011a\1\62\1\u011a\11\62\7\0\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\16\0\4\13\2\0\15\13"+
    "\1\u011b\13\13\7\0\2\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\16\0\4\13\2\0\12\13\1\u011c\16\13"+
    "\7\0\2\13\1\0\2\13\1\0\1\13\1\0\2\13"+
    "\16\0\4\13\2\0\7\13\1\u011d\21\13\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\4\13"+
    "\2\0\26\13\1\u011e\2\13\7\0\2\u011f\1\0\1\62"+
    "\1\u011f\1\0\1\u011f\21\0\3\62\1\u011f\2\0\3\62"+
    "\1\u011f\7\62\3\u011f\1\62\1\u011f\11\62\7\0\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\16\0\2\13"+
    "\1\u0120\1\13\2\0\31\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\6\1\3\11\1\1\10\11"+
    "\7\1\1\11\24\1\1\11\1\1\4\11\11\1\1\11"+
    "\54\1\1\0\1\1\1\0\254\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public class Tuple {
        public final int line;
        public final int col;
        public final String token;
        public final String type;

        public Tuple(int line, int col, String token, String type) {
            this.line = line;
            this.col = col;
            this.token = token;
            this.type = type;
        }
    }

    Queue<Symbol> symbolPipe = new ConcurrentLinkedQueue<Symbol>();

    int openParenthesis = 0;
    boolean foundString = false;
    int prevLineTabCount = 0;
    StringBuilder string = new StringBuilder();

    public Symbol exportToken(int symNum, Object value, int line, int column) {

        if (symNum == sym.LPAREN) {
            openParenthesis++;
        }
        else if (symNum == sym.RPAREN) {
            openParenthesis--;
        }

        if (symNum == sym.TAB) {
                symbolPipe.add(new TabSymbol(symNum, line + 1, column + 1, value));
        }
        else
            symbolPipe.add(new Symbol(symNum, line + 1, column + 1, value));

        if (!symbolPipe.isEmpty()) {
            return symbolPipe.poll();
        } else {
            return new Symbol(sym.EOF);
        }
    }

    public Symbol exportToken(int[] symNums, Object[] values) {

        for (int counter = 0; counter < symNums.length; counter++) {
            if (symNums[counter] == sym.LPAREN) {
                openParenthesis++;
            }
            else if (symNums[counter] == sym.RPAREN) {
                openParenthesis--;
            }

            if (symNums[counter] == sym.TAB) {
                    symbolPipe.add(new TabSymbol(symNums[counter], values[counter]));
            } else {
                symbolPipe.add(new Symbol(symNums[counter], values[counter]));
            }
        }

        if (!symbolPipe.isEmpty()) {
            return symbolPipe.poll();
        } else {
            return new Symbol(sym.EOF);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3470) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (!symbolPipe.isEmpty()) {
        return symbolPipe.poll();
    } else {
        return new Symbol(sym.EOF);
    }
            }
            case 289: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 97: break;
          case 2: 
            { if (!foundString) {
    String text = yytext();

    if (text.contains(" ")) {
        if (text.length() > prevLineTabCount) {
            if (openParenthesis == 0)
            if ((text.length() - prevLineTabCount) / 2 == 1) {
                prevLineTabCount = text.length();
                return exportToken(sym.START, yytext(), yyline, yycolumn);
            } else {
                int[] syms = new int[(prevLineTabCount - text.length()) / 2];
                for (int counter = 0; counter < (prevLineTabCount - text.length()) / 2; counter++) {
                    syms[counter] = sym.START;
                }
                Object[] values = new Object[(prevLineTabCount - text.length()) / 2];
                for (int counter = 0; counter < values.length; counter++)
                    values[counter] = new Object();
                prevLineTabCount = text.length();
                return exportToken(syms, values);
            }
        } else if (text.length() < prevLineTabCount) {
            if (openParenthesis == 0)
            if ((prevLineTabCount - text.length()) / 2 == 1) {
                prevLineTabCount = text.length();
                return exportToken(sym.END, yytext(), yyline, yycolumn);
            } else {
                int[] syms = new int[(prevLineTabCount - text.length()) / 2];
                for (int counter = 0; counter < (prevLineTabCount - text.length()) / 2; counter++) {
                    syms[counter] = sym.END;
                }
                Object[] values = new Object[(prevLineTabCount - text.length()) / 2];
                for (int counter = 0; counter < values.length; counter++)
                    values[counter] = new Object();
                prevLineTabCount = text.length();
                return exportToken(syms, values);
            }
        }
    }
    else {
        if (text.length() < prevLineTabCount) {
            if ((prevLineTabCount - text.length()) / 2 == 1) {
                prevLineTabCount = text.length();
                return exportToken(sym.END, yytext(), yyline, yycolumn);
            } else {
                int[] syms = new int[(prevLineTabCount - text.length()) / 2];
                for (int counter = 0; counter < (prevLineTabCount - text.length()) / 2; counter++) {
                    syms[counter] = sym.END;
                }
                Object[] values = new Object[(prevLineTabCount - text.length()) / 2];

                for (int counter = 0; counter < values.length; counter++)
                    values[counter] = new Object();
                prevLineTabCount = text.length();
                return exportToken(syms, values);
            }
        }
    }
    }
    else {
        string.append(yytext());
    }
            }
          case 98: break;
          case 3: 
            { if (foundString) string.append(yytext());
            }
          case 99: break;
          case 4: 
            { if (!foundString) return exportToken(sym.DIVISION, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 100: break;
          case 5: 
            { if (!foundString) return exportToken(sym.MULTIPLY, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 101: break;
          case 6: 
            { if (!foundString) {
        try {
                            return exportToken(sym.NUMBER, Short.parseShort(yytext()), yyline, yycolumn);
        } catch(Exception ex1) {
            try {
                        return exportToken(sym.NUMBER, Integer.parseInt(yytext()), yyline, yycolumn);
            } catch(Exception ex2) {
                try {
                    return exportToken(sym.NUMBER, Long.parseLong(yytext()), yyline, yycolumn);
                } catch(Exception ex3) {
                    try {
                return exportToken(sym.NUMBER, Float.parseFloat(yytext()), yyline, yycolumn);
                    } catch(Exception ex4) {
                        try {
            return exportToken(sym.NUMBER, Double.parseDouble(yytext()), yyline, yycolumn);
                        } catch(Exception ex5) {
                            return exportToken(sym.NUMBER, Boolean.parseBoolean(yytext()), yyline, yycolumn);
                        }
                    }
                }
            }
        }
    }
    else string.append(yytext());
            }
          case 102: break;
          case 7: 
            { if (!foundString) return exportToken(sym.SUBTRACT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 103: break;
          case 8: 
            { if (!foundString) return exportToken(sym.IDENTIFIER, yytext(), yyline, yycolumn);
    else string.append(yytext());
            }
          case 104: break;
          case 9: 
            { if (!foundString) return exportToken(sym.DOT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 105: break;
          case 10: 
            { if (!foundString) return exportToken(sym.SUM, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 106: break;
          case 11: 
            { if (!foundString) return exportToken(sym.LBRACKET, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 107: break;
          case 12: 
            { if (!foundString) return exportToken(sym.RBRACKET, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 108: break;
          case 13: 
            { if (!foundString) return exportToken(sym.ASSIGN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 109: break;
          case 14: 
            { if (!foundString) return exportToken(sym.POWER, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 110: break;
          case 15: 
            { if (!foundString) return exportToken(sym.LPAREN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 111: break;
          case 16: 
            { if (!foundString) return exportToken(sym.RPAREN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 112: break;
          case 17: 
            { if (!foundString) return exportToken(sym.LBRACE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 113: break;
          case 18: 
            { if (!foundString) return exportToken(sym.RBRACE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 114: break;
          case 19: 
            { if (!foundString) return exportToken(sym.SEMI, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 115: break;
          case 20: 
            { if (!foundString) return exportToken(sym.COLON, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 116: break;
          case 21: 
            { if (!foundString) return exportToken(sym.COMMA, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 117: break;
          case 22: 
            { if (!foundString) return exportToken(sym.GT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 118: break;
          case 23: 
            { if (!foundString) return exportToken(sym.LT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 119: break;
          case 24: 
            { if (foundString) string.append('\\');
            }
          case 120: break;
          case 25: 
            { if (!foundString) {
        foundString = true;
    } else {
        foundString = false;
        String result = string.toString();
        string.setLength(0);
        string = new StringBuilder();
        return exportToken(sym.STRING, result, yyline, yycolumn);
    }
            }
          case 121: break;
          case 26: 
            { if (!foundString) return exportToken(sym.WORD, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 122: break;
          case 27: 
            { if (!foundString) return exportToken(sym.ARROW, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 123: break;
          case 28: 
            { if (!foundString) return exportToken(sym.EQUAL, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 124: break;
          case 29: 
            { if (!foundString) return exportToken(sym.GE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 125: break;
          case 30: 
            { if (!foundString) return exportToken(sym.LE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 126: break;
          case 31: 
            { if (!foundString) return exportToken(sym.NE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 127: break;
          case 32: 
            { if (foundString) string.append("\"");
            }
          case 128: break;
          case 33: 
            { if (!foundString) return exportToken(sym.IS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 129: break;
          case 34: 
            { if (!foundString) return exportToken(sym.IN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 130: break;
          case 35: 
            { if (!foundString) return exportToken(sym.IF, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 131: break;
          case 36: 
            { if (!foundString) return exportToken(sym.BY, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 132: break;
          case 37: 
            { if (!foundString) return exportToken(sym.ON, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 133: break;
          case 38: 
            { if (!foundString) return exportToken(sym.OR, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 134: break;
          case 39: 
            { if (!foundString) return exportToken(sym.OF, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 135: break;
          case 40: 
            { if (!foundString) return exportToken(sym.AS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 136: break;
          case 41: 
            { if (!foundString) return exportToken(sym.DO, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 137: break;
          case 42: 
            { if (!foundString) return exportToken(sym.USE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 138: break;
          case 43: 
            { if (!foundString) return exportToken(sym.TRY, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 139: break;
          case 44: 
            { if (!foundString) return exportToken(sym.NEW, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 140: break;
          case 45: 
            { if (!foundString) return exportToken(sym.NOT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 141: break;
          case 46: 
            { if (!foundString) return exportToken(sym.AND, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 142: break;
          case 47: 
            { if (!foundString) return exportToken(sym.ARE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 143: break;
          case 48: 
            { if (!foundString) return exportToken(sym.MOD, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 144: break;
          case 49: 
            { if (!foundString) return exportToken(sym.FOR, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 145: break;
          case 50: 
            { if (!foundString) return exportToken(sym.STEP, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 146: break;
          case 51: 
            { if (!foundString) return exportToken(sym.EXIT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 147: break;
          case 52: 
            { if (!foundString) return exportToken(sym.ELSE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 148: break;
          case 53: 
            { if (!foundString) return exportToken(sym.EACH, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 149: break;
          case 54: 
            { if (!foundString) return exportToken(sym.ITEM, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 150: break;
          case 55: 
            { if (!foundString) return exportToken(sym.TRUE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 151: break;
          case 56: 
            { if (!foundString) return exportToken(sym.THEN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 152: break;
          case 57: 
            { if (!foundString) return exportToken(sym.BOWL, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 153: break;
          case 58: 
            { if (!foundString) return exportToken(sym.OVER, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 154: break;
          case 59: 
            { if (!foundString) return exportToken(sym.WITH, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 155: break;
          case 60: 
            { if (!foundString) return exportToken(sym.LIKE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 156: break;
          case 61: 
            { if (!foundString) return exportToken(sym.LOOP, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 157: break;
          case 62: 
            { if (!foundString) return exportToken(sym.ARGS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 158: break;
          case 63: 
            { if (!foundString) return exportToken(sym.PROP, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 159: break;
          case 64: 
            { if (!foundString) return exportToken(sym.EMPTY, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 160: break;
          case 65: 
            { if (!foundString) return exportToken(sym.USING, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 161: break;
          case 66: 
            { if (!foundString) return exportToken(sym.UNTIL, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 162: break;
          case 67: 
            { if (!foundString) return exportToken(sym.ENCAPSULATE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 163: break;
          case 68: 
            { if (!foundString) return exportToken(sym.ERROR, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 164: break;
          case 69: 
            { if (!foundString) return exportToken(sym.TIMES, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 165: break;
          case 70: 
            { if (!foundString) return exportToken(sym.BASED, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 166: break;
          case 71: 
            { if (!foundString) return exportToken(sym.WHICH, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 167: break;
          case 72: 
            { if (!foundString) return exportToken(sym.NAMED, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 168: break;
          case 73: 
            { if (!foundString) return exportToken(sym.VALUE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 169: break;
          case 74: 
            { if (!foundString) return exportToken(sym.CLASS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 170: break;
          case 75: 
            { if (!foundString) return exportToken(sym.CATCH, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 171: break;
          case 76: 
            { if (!foundString) return exportToken(sym.DOING, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 172: break;
          case 77: 
            { if (!foundString) return exportToken(sym.MEANS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 173: break;
          case 78: 
            { if (!foundString) return exportToken(sym.FALSE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 174: break;
          case 79: 
            { if (!foundString) return exportToken(sym.PROPS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 175: break;
          case 80: 
            { if (!foundString) return exportToken(sym.OBJECT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 176: break;
          case 81: 
            { if (!foundString) return exportToken(sym.RETURN, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 177: break;
          case 82: 
            { if (!foundString) return exportToken(sym.CREATE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 178: break;
          case 83: 
            { if (!foundString) return exportToken(sym.CAUGHT, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 179: break;
          case 84: 
            { if (!foundString) return exportToken(sym.ACTION, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 180: break;
          case 85: 
            { if (!foundString) return exportToken(sym.DEFINE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 181: break;
          case 86: 
            { if (!foundString) return exportToken(sym.PARAMS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 182: break;
          case 87: 
            { if (!foundString) return exportToken(sym.BEHAVES, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 183: break;
          case 88: 
            { if (!foundString) return exportToken(sym.COMMAND, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 184: break;
          case 89: 
            { if (!foundString) return exportToken(sym.CREATED, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 185: break;
          case 90: 
            { if (!foundString) return exportToken(sym.INSTANCE, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 186: break;
          case 91: 
            { if (!foundString) return exportToken(sym.REMEMBER, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 187: break;
          case 92: 
            { if (!foundString) return exportToken(sym.FUNCTION, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 188: break;
          case 93: 
            { if (!foundString) return exportToken(sym.SATISFIED, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 189: break;
          case 94: 
            { if (!foundString) return exportToken(sym.BEHAVIOUR, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 190: break;
          case 95: 
            { if (!foundString) return exportToken(sym.CAREFULLY, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 191: break;
          case 96: 
            { if (!foundString) return exportToken(sym.CONDITIONS, yytext(), yyline, yycolumn); else string.append(yytext());
            }
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java TraLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        TraLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new TraLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
